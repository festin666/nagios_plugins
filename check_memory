#!/bin/sh

PROGNAME=`basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"

export PATH

STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

print_usage() {
	echo "Usage: $PROGNAME" [-w <range>] [-c <range>] [--help] [-v]
}
print_help() {
	print_usage
	echo ""
	echo "This plugin checks Freebsd memory status."
	echo ""
	exit $STATE_OK
}
check_range() {
	# based on code from utils.sh from nagios-plugins.
	local v range yes no err decimal start end cmp match
	v="$1"
	range="$2"

	# whether to raise an alert or not
	yes=0
	no=1
	err=2

	# regex to match a decimal number
	decimal="-?([0-9]+\.?[0-9]*|[0-9]*\.[0-9]+)"

	# compare numbers (including decimals), returning true/false
	cmp() { awk "BEGIN{ if ($1) exit(0); exit(1)}"; }

	# returns successfully if the string in the first argument matches the
	# regex in the second
	match() { echo "$1" | grep -E -q -- "$2"; }

	# make sure value is valid
	if ! match "$v" "^$decimal$"; then
		echo "${0##*/}: check_range: invalid value" >&2
		unset -f cmp match
		return "$err"
	fi

	# make sure range is valid
	if ! match "$range" "^@?(~|$decimal)(:($decimal)?)?$"; then
		echo "${0##*/}: check_range: invalid range" >&2
		unset -f cmp match
		return "$err"
	fi

	# check for leading @ char, which negates the range
	if match $range '^@'; then
		range=${range#@}
		yes=1
		no=0
	fi

	# parse the range string
	if ! match "$range" ':'; then
		start=0
		end="$range"
	else
		start="${range%%:*}"
		end="${range#*:}"
	fi

	# do the comparison, taking positive ("") and negative infinity ("~")
	# into account
	if [ "$start" != "~" ] && [ "$end" != "" ]; then
		if cmp "$start <= $v" && cmp "$v <= $end"; then
			unset -f cmp match
			return "$no"
		else
			unset -f cmp match
			return "$yes"
		fi
	elif [ "$start" != "~" ] && [ "$end" = "" ]; then
		if cmp "$start <= $v"; then
			unset -f cmp match
			return "$no"
		else
			unset -f cmp match
			return "$yes"
		fi
	elif [ "$start" = "~" ] && [ "$end" != "" ]; then
		if cmp "$v <= $end"; then
			unset -f cmp match
			return "$no"
		else
			unset -f cmp match
			return "$yes"
		fi
	else
		unset -f cmp match
		return "$no"
	fi
}


pagesize=4096 # TODO read from sysctl
b2mb=$((1024*1024))
exit_status=0

case "$1" in
	--help)
		print_help
		exit $STATE_OK
		;;
	-h)
		print_help
		exit $STATE_OK
		;;
	*)
		m_total_p=`sysctl -n vm.stats.vm.v_page_count`
		m_cache_p=`sysctl -n vm.stats.vm.v_cache_count`
		m_active_p=`sysctl -n vm.stats.vm.v_active_count`
		m_inactive_p=`sysctl -n vm.stats.vm.v_inactive_count`
		m_wire_p=`sysctl -n vm.stats.vm.v_wire_count`
		m_free_p=`sysctl -n vm.stats.vm.v_free_count`

		# Next calculation needed just for checking we're on the right way
		m_total_calc_p=$(($m_cache_p+$m_active_p+$m_inactive_p+$m_wire_p+$m_free_p))

		m_total_calc_mb=$(($m_total_calc_p*$pagesize/$b2mb))
		m_used_calc_p=$(($m_active_p+$m_wire_p))
		m_used_calc_mb=$(($m_used_calc_p*$pagesize/$b2mb))
		m_total_mb=$(($m_total_p*$pagesize/$b2mb))
		m_cache_mb=$(($m_cache_p*$pagesize/$b2mb))
		m_active_mb=$(($m_active_p*$pagesize/$b2mb))
		m_inactive_mb=$(($m_inactive_p*$pagesize/$b2mb))
		m_wire_mb=$(($m_wire_p*$pagesize/$b2mb))
		m_free_mb=$(($m_free_p*$pagesize/$b2mb))

		m_used_percent=`echo "scale=2;$m_used_calc_p/$m_total_calc_p*100"|bc`
		echo "OK: used ${m_used_percent}%"

		exit $exit
		;;
esac
